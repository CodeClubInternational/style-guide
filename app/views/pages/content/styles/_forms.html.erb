<%= section_header('Basic Form Markup') %>

<p>Although it doesn't trigger any currently presentational styles, all forms must begin and end with the following markup.</p>

<p>
  You'll need to ensure that your form's <%= highlight_sass_example('method') %> and
  <%= highlight_sass_example('action') %>
  attributes are correct too, and any forms handling file uploads will require the
  <%= highlight_sass_example('enctype="multipart/form-data";') %> attribute to be present too.
</p>

<p>
  You should wrap your form's inner elements in one or more <%= highlight_sass_example('fieldset') %> elements.
  If your form has multiple sections it may be beneficial to the user to include a
  <%= highlight_sass_example('legend') %> element in each fieldset,
  for the purposes of describing the fields contained therein. This may not be necessary on smaller, more focused forms, such as
  a "log in" or "search" form.
</p>

<%= render_example(:only_code => true) do %>
<form class="c-form">
  <fieldset class="c-form__fieldset">
    <legend class="c-form__legend">Form Legend Text</legend>
    ...
  </fieldset>
</form>
<% end %>

<%= section_header('Labels or Placeholders?', :h3) %>

<p>
  In order to maximise the accessibility and usability of your forms, all input fields should have an accompanying
  <%= highlight_html_example('<label>') %>
  element. According to the <%= link_to 'WHATWG HTML specification', 'https://developers.whatwg.org/common-input-element-attributes.html#the-placeholder-attribute' %>:
</p>

<blockquote>
  <p>
    The placeholder attribute represents a <em>short</em> hint (a word or short phrase) intended to
    aid the user with data entry when the control has no value. A hint could be a sample value or a
    brief description of the expected format.
  </p>

  <p>&hellip;</p>

  <p>
    The placeholder attribute should not be used as an alternative to a label. For a longer hint or
    other advisory text, the title attribute is more appropriate.
  </p>
</blockquote>

<p>
  I short, this means that your <%= highlight_html_example('<input>') %> fields should have a
  <%= highlight_html_example('<label>') %> to indicate
  <em>the content your user is required to enter</em>, and an optional placeholder with an <em>example of that data</em>.
</p>

<p>
  Here are a couple of examples. First, the <span class="u-color--red">bad</span>:
</p>

<%= render_example(:with_code => false) do %>
<input class="c-form__input" id="label_example" name="user[whatevers]" placeholder="Enter your email address" type="email">
<% end %>

<p>
  And the correct way to show a form field with a label:
</p>

<%= render_example(:with_code => false) do %>
<label class="c-form__label" for="label_example">Enter your email address</label>
<input class="c-form__input" id="label_example" name="user[whatevers]" placeholder="example@domain.com" type="email">
<% end %>

<p>
  Please also make sure that your labels and inputs are semantically associated with one another using a
  <%= highlight_sass_example('for') %> attribute on the label that corresponds with the
  <%= highlight_sass_example('id') %> attribute on the intended input.
</p>

<%= section_header('A note about buttons', :h3) %>

<p>
  This page doesn't contain any examples of "submit" buttons or similar. When your forms need a button, use one of the options
  shown on the <%= link_to "buttons", page_path('styles', 'buttons') %> page.
</p>

<p>
  If a form is your page's primary action, then you should use a green button. If it performs a destructive action then use a red button.
</p>

<hr>

<%= section_header('Basic Form Elements') %>

<%= section_header('Labels', :h3) %>

<%= render_example do %>
<label class="c-form__label">Enter your email address again</label>
<% end %>

<p>
  In cases where the label is also intended to denote an optional or a required field, use the following extra markup:
</p>

<%= render_example do %>
<label class="c-form__label">
  Enter your email address again
  <span class="c-form__label-note">(optional)</span>
</label>
<% end %>
<%= section_header('Basic Input Fields', :h3) %>

<p>
  This style should be used for any field that accepts a free input of alphanumeric characters. It can
  contain an optional placeholder, where browser support exists.
</p>

<%= render_example do %>
<input class="c-form__input" name="user[name]" placeholder="Grace Hopper" type="text">
<% end %>

<%= section_header('Input Sizes', :h3) %>

<p>
  By default all inputs are displayed at 100% width of their containing element.
  If you need more control over your input sizes then use the following classes:
</p>

<ul>
  <li><%= highlight_sass_example('c-form__input--width-xs') %></li>
  <li><%= highlight_sass_example('c-form__input--width-s') %></li>
  <li><%= highlight_sass_example('c-form__input--width-l') %></li>
  <li><%= highlight_sass_example('c-form__input--width-xl') %></li>
  <li><%= highlight_sass_example('c-form__input--width-xxl') %></li>
</ul>

<%= render_example(:with_code => false) do %>
<input class="c-form__input c-form__input--width-xs"  name="user[name]" placeholder="Grace Hopper" type="text">
<input class="c-form__input c-form__input--width-s"   name="user[name]" placeholder="Grace Hopper" type="text">
<input class="c-form__input c-form__input--width-l"   name="user[name]" placeholder="Grace Hopper" type="text">
<input class="c-form__input c-form__input--width-xl"  name="user[name]" placeholder="Grace Hopper" type="text">
<input class="c-form__input c-form__input--width-xxl" name="user[name]" placeholder="Grace Hopper" type="text">
<% end %>

<%= section_header('Inline Inputs', :h3) %>

<p>
  Input fields are set to behave as a <em>block level element</em>. To override
  this behavior use the <%= highlight_sass_example('c-form__input--inline') %> class.
</p>

<%= render_example(:show_code => false) do %>
  <% 5.times do %>
   <input class="c-form__input c-form__input--inline c-form__input--width-s"   name="user[name]" placeholder="Grace Hopper" type="text">
  <% end %>
<% end %>

<%= section_header('Textareas', :h3) %>

<p>
  When creating your textareas, remember to set the <%= highlight_sass_example('rows') %>
  and <%= highlight_sass_example('cols') %> attributes to suitable numbers.
  Defining the number of <%= highlight_sass_example('cols') %> is purely in the interests of valid markup, as the
  style will always stretch to the full width of
  its parent.
</p>

<%= render_example do %>
<textarea class="c-form__textarea" id="whatevers_textarea" name="user[whatevers]" placeholder="Lorem ipsum dolor sit amet..." rows="5" cols="40"></textarea>
<% end %>

<%= section_header('Select Boxes', :h3) %>

<%= render_example do %>
<select name="user[selection]" id="whatevers_select" class="c-form__select">
  <option>Volunteer at a club</option>
  <option>Find volunteers for my club</option>
  <option>Find a public club</option>
</select>
<% end %>

<%= section_header('Select Box Sizes', :h3) %>

<p>
  Just like regular inputs, select boxes can be sized with the following classes:
</p>

<ul>
  <li><%= highlight_sass_example('c-form__select--width-xs') %></li>
  <li><%= highlight_sass_example('c-form__select--width-s') %></li>
  <li><%= highlight_sass_example('c-form__select--width-l') %></li>
  <li><%= highlight_sass_example('c-form__select--width-xl') %></li>
  <li><%= highlight_sass_example('c-form__select--width-xxl') %></li>
</ul>

<%= render_example(:with_code => false) do %>
<select name="user[selection]" id="whatevers_select" class="c-form__select c-form__select--width-xs">
  <option>Volunteer at a club</option>
  <option>Find volunteers for my club</option>
  <option>Find a public club</option>
</select>
<select name="user[selection]" id="whatevers_select" class="c-form__select c-form__select--width-s">
  <option>Volunteer at a club</option>
  <option>Find volunteers for my club</option>
  <option>Find a public club</option>
</select>
<select name="user[selection]" id="whatevers_select" class="c-form__select c-form__select--width-l">
  <option>Volunteer at a club</option>
  <option>Find volunteers for my club</option>
  <option>Find a public club</option>
</select>
<select name="user[selection]" id="whatevers_select" class="c-form__select c-form__select--width-xl">
  <option>Volunteer at a club</option>
  <option>Find volunteers for my club</option>
  <option>Find a public club</option>
</select>
<select name="user[selection]" id="whatevers_select" class="c-form__select c-form__select--width-xxl">
  <option>Volunteer at a club</option>
  <option>Find volunteers for my club</option>
  <option>Find a public club</option>
</select>
<% end %>

<%= section_header('Inline Select Boxes', :h3) %>

<p>
  Select boxes are set to behave as a <em>block level element</em>. To override
  this behavior use the <%= highlight_sass_example('c-form__select--inline') %> class.
</p>

<%= render_example(:with_code => false) do %>
  <% 5.times do %>
    <select name="user[selection]" id="whatevers_select" class="c-form__select c-form__select--inline c-form__select--width-s">
      <option>Option 1</option>
      <option>Option 2</option>
      <option>Option 3</option>
    </select>
  <% end %>
<% end %>

<%= section_header('Checkboxes', :h3) %>

<%= render_example do %>
<label class="c-form__label">
  <input name="user[terms_accepted]" type="checkbox" value="true" checked="checked">
  Please accept our Terms of Service
</label>
<label class="c-form__label">
  <input name="user[newsletter_signup]" type="checkbox" value="true">
  Would you like to subscribe to our newsletter?
</label>
<label class="c-form__label">
  <input name="user[other]" type="checkbox" value="true">
  Some other question?
</label>
<% end %>

<%= section_header('Radio Buttons', :h3) %>

<%= render_example do %>
<label class="c-form__label">
  <input name="user[options]" type="radio" value="1" checked="checked">
  This is the first possible answer of three.
</label>
<label class="c-form__label">
  <input name="user[options]" type="radio" value="2">
  And here's the second.
</label>
<label class="c-form__label">
  <input name="user[options]" type="radio" value="3">
  Would you look at that? It's the third option!
</label>
<% end %>

<%= section_header('File Upload Inputs', :h3) %>

<%= render_example do %>
<input class="c-form__input" id="whatevers" name="user[whatevers]" placeholder="example@domain.com" type="file">
<% end %>

<hr>

<%= section_header('Creating More Useful Forms') %>

<%= section_header('Fields with Additional Information', :h3) %>

<p>Occasionally you'll need to provide the user with guidance on what kind of information your form's inputs expect. You can use the <%= link_to "alert", page_path('styles', 'alerts') %> component to achieve this.</p>

<%= render_example do %>
<label class="c-form__label" for="whatevers">Email Address</label>
<div class="c-alert c-alert--info c-alert--inline">
  <span class="c-icon c-icon--small c-icon--info-fill c-icon--white"></span>
  If you are a teacher please use your school email address
</div>
<input class="c-form__input" id="whatevers" name="user[whatevers]" placeholder="example@domain.com" type="email">
<% end %>

<%= section_header('Error Highlighting', :h3) %>

<p><%= link_to "Alerts", page_path('styles', 'alerts') %> can also be used to notify the user of data entry errors on individual fields.</p>

<p>It's often a good idea to also notify the user that errors have occured in a separate alert at the top of the page, but this might not be necessary if your form and its inline errors are the focus of the page, for example on a dedicated "log in" screen.</p>

<%= render_example do %>
<label class="c-form__label c-form__label--error" for="whatevers">Email Address</label>
<div class="c-alert c-alert--error c-alert--inline">
  <span class="c-icon c-icon--small c-icon--error c-icon--white"></span>
  Please provide a valid email address
</div>
<input class="c-form__input c-form__input--error" id="whatevers" name="user[whatevers]" placeholder="example@domain.com" type="email" value="user@hotmial">
<% end %>

Your can also use <%= highlight_sass_example('--error') %> with other form elements:
<ul>
  <li><%= highlight_sass_example('c-form__select--error') %></li>
  <li><%= highlight_sass_example('c-form__textarea--error') %></li>
</ul>

<hr>

<%= section_header('Extra form styles') %>

<%= section_header('Checkbox Group', :h3) %>

<p>When you need a group of stylised checkboxes, use the following markup. Be careful to ensure that your labels'
  <%= highlight_sass_example('for') %> attribute matches its corresponding input's
  <%= highlight_sass_example('id') %> attribute.</p>

<%= render_example do %>
<div class="c-form__input-group">
  <input class="c-form__input-group-checkbox" id="input-group-checkbox-1" name="user[terms_accepted]" type="checkbox" value="true" checked="checked">
  <label class="c-form__input-group-label" for="input-group-checkbox-1">Please accept our Terms of Service</label>
  <input class="c-form__input-group-checkbox" id="input-group-checkbox-2" name="user[newsletter_signup]" type="checkbox" value="true">
  <label class="c-form__input-group-label" for="input-group-checkbox-2">Would you like to subscribe to our newsletter?</label>
  <input class="c-form__input-group-checkbox" id="input-group-checkbox-3" name="user[other]" type="checkbox" value="true">
  <label class="c-form__input-group-label" for="input-group-checkbox-3">Some other question?</label>
</div>
<% end %>

<%= section_header('Radio Input Group', :h3) %>

<p>You can achieve a similar effect to the checkbox group with a series of radio inputs.</p>

<%= render_example do %>
<div class="c-form__input-group">
  <input class="c-form__input-group-radio" id="input-group-radio-1" name="user[options]" type="radio" value="1" checked="checked">
  <label class="c-form__input-group-label" for="input-group-radio-1">This is the first possible answer of three.</label>
  <input class="c-form__input-group-radio" id="input-group-radio-2" name="user[options]" type="radio" value="2">
  <label class="c-form__input-group-label" for="input-group-radio-2">And here's the second.</label>
  <input class="c-form__input-group-radio" id="input-group-radio-3" name="user[options]" type="radio" value="3">
  <label class="c-form__input-group-label" for="input-group-radio-3">Would you look at that? It's the third option!</label>
</div>
<% end %>
